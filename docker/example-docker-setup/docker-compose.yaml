version: '3.5'

networks:
  frontend:
    name: frontend
  backend:
    name: backend
  email:
    name: email
  openvpn:
    name: openvpn
    ipam:
      config: 
       - subnet: 172.72.72.0/30
  default:
    name: frontend

volumes:
  nextcloud-db:
    driver: local
  nextcloud-db-logs:
    driver: local
  nextcloud-redis:
    driver: local
  nextcloud-html:
    driver: local
  nginx-conf:
    driver: local
  nginx-logs:
    driver: local
  nginx-certs:
    driver: local
  nginx-html:
    driver: local
  portainer-data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elastic_data:
    driver: local
  filebeat_data:
    driver: local
  photoshow-config:
    driver: local
  photoshow-thumbs:
    driver: local
  passbolt_db:
    driver: local
  passbolt_gpg:
    driver: local
  passbolt_images:
    driver: local


services:

  nextcloud-db:
    container_name: nextcloud-db
    image: mariadb
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    restart: always
    networks:
      - backend
    volumes:
      - nextcloud-db:/var/lib/mysql
      - nextcloud-db-logs:/var/log/mysql
    environment:
      - TZ=${DOCKER_TZ}
      - MYSQL_ROOT_PASSWORD=${NEXCLOUD_DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${NEXTCLOUD_DB_NAME}
      - MYSQL_USER=${NEXTCLOUD_DB_USER}
      - MYSQL_PASSWORD=${NEXTCLOUD_DB_PASSWORD}
    labels:
      co.elastic.logs/disable: false

  nextcloud-redis:
    container_name: nextcloud-redis
    image: redis:alpine
    restart: always
    environment:
      - TZ=${DOCKER_TZ}
    sysctls:
      net.core.somaxconn: 511
      # see readme.md
    networks:
      - backend
    volumes:
      - nextcloud-redis:/var/lib/redis
    labels:
      co.elastic.logs/disable: false

  nextcloud-app:
    container_name: nextcloud-app
    #build: ./nextcloud/.
    image: docker.remim.com/nextcloud:latest
    networks:
      - frontend
      - backend
      - email
    restart: always
    depends_on:
      - nextcloud-db
    environment:
      - TZ=${DOCKER_TZ}
      - MYSQL_DATABASE=${NEXTCLOUD_DB_NAME}
      - MYSQL_USER=${NEXTCLOUD_DB_USER}
      - MYSQL_PASSWORD=${NEXTCLOUD_DB_PASSWORD}
      - MYSQL_HOST=nextcloud-db
      - NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}
      - NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
      - NEXTCLOUD_TRUSTED_DOMAINS=${NEXTCLOUD_DOMAIN}
      - NEXTCLOUD_OVERWRITEPROTOCOL=https
      - REDIS_HOST=nextcloud-redis
      - REDIS_HOST_PORT=6379
    volumes:
      - nextcloud-html:/var/www/html
      - ${MY_DOCKER_DATA_DIR}/nextcloud/data:/var/www/html/data
    labels:
      co.elastic.logs/disable: false
      co.elastic.logs/module: php-fpm
      co.elastic.logs/fileset.stdout: logs
      co.elastic.logs/fileset.stderr: logs

  nextcloud-web:
    container_name: nextcloud-web
    #build: ./nginx-fpm/.
    image: docker.remim.com/nginx-fpm:latest
    networks:
      backend:
      frontend:
        aliases:
          - nextcloud-vts-status
    restart: always
    depends_on:
      - nextcloud-app
    environment:
      - TZ=${DOCKER_TZ}
      - VIRTUAL_HOST=${NEXTCLOUD_DOMAIN}
      - VIRTUAL_PORT=80
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${NEXTCLOUD_DOMAIN}
      - LETSENCRYPT_EMAIL=${NOTIFICATION_EMAIL}
    volumes:
      - nextcloud-html:/var/www/html:ro
      - ${MY_DOCKER_DATA_DIR}/nextcloud/data:/var/www/html/data:ro
    labels:
      co.elastic.logs/disable: false
      co.elastic.logs/module: nginx
      co.elastic.logs/fileset.stdout: access
      co.elastic.logs/fileset.stderr: error

  simple-apache-php:
    container_name: simple-apache-php
    #build: ./simple-apache-php/.
    image: docker.remim.com/simple-apache-php:latest
    restart: always
    expose:
      - "80"
    environment:
      - TZ=${DOCKER_TZ}
      - VIRTUAL_HOST=${SIMPLE_APACHE_PHP_DOMAIN}
      - VIRTUAL_PORT=80
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${SIMPLE_APACHE_PHP_DOMAIN}
      - LETSENCRYPT_EMAIL=${NOTIFICATION_EMAIL}
    healthcheck:
      test: ["CMD", "curl", "-f", "https://${SIMPLE_APACHE_PHP_DOMAIN}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - frontend
    volumes:
      - ${MY_DOCKER_DATA_DIR}/simple-apache-php/src:/var/www/html
    labels:
      co.elastic.logs/disable: false
      co.elastic.logs/module: apache
      co.elastic.logs/fileset.stdout: access
      co.elastic.logs/fileset.stderr: error

  nginx-redirect:
    container_name: nginx-redirect
    image: nginx:latest
    restart: always
    expose:
      - "80"
    environment:
      - TZ=${DOCKER_TZ}
      - VIRTUAL_HOST=${REDIRECT_DOMAINS}
      - VIRTUAL_PORT=80
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${REDIRECT_DOMAINS}
      - LETSENCRYPT_EMAIL=${NOTIFICATION_EMAIL}
    networks:
      - frontend
    volumes:
      - ${MY_DOCKER_DATA_DIR}/nginx-redirect/conf.d:/etc/nginx/conf.d
    labels:
      co.elastic.logs/disable: false
      co.elastic.logs/module: nginx
      co.elastic.logs/fileset.stdout: access
      co.elastic.logs/fileset.stderr: error

  grav:
    container_name: grav
    #build: ./grav/.
    image: docker.remim.com/grav:latest
    restart: always
    expose:
      - "80"
    environment:
      - TZ=${DOCKER_TZ}
      - VIRTUAL_HOST=${GRAV_DOMAIN}
      - VIRTUAL_PORT=80
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${GRAV_DOMAIN}
      - LETSENCRYPT_EMAIL=${NOTIFICATION_EMAIL}
    networks:
      - frontend
      - email
    volumes:
      - ${MY_DOCKER_DATA_DIR}/grav:/var/www/html:cached
      - ${MY_DOCKER_DATA_DIR}/nextcloud/data/remi/files/Nettsider/TheAwesomeGarage/garage-web-favicon-new.png:/var/www/html/user/themes/quark/images/favicon.png:ro
      - ${MY_DOCKER_DATA_DIR}/nextcloud/data/remi/files/Nettsider/TheAwesomeGarage/garage-web-logo-new.svg:/var/www/html/user/themes/quark/images/grav-logo.svg:ro
    labels:
      co.elastic.logs/disable: false
      co.elastic.logs/module: apache
      co.elastic.logs/fileset.stdout: access
      co.elastic.logs/fileset.stderr: error


  bondesjakk:
    container_name: bondesjakk
    image: node:12
    restart: always
    expose:
      - "3000"
    environment:
      - TZ=${DOCKER_TZ}
      - VIRTUAL_HOST=${BONDESJAKK_DOMAIN}
      - VIRTUAL_PORT=3000
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${BONDESJAKK_DOMAIN}
      - LETSENCRYPT_EMAIL=${NOTIFICATION_EMAIL}
      - NODE_ENV=production
    user: "node"
    working_dir: /home/node/app
    command: "npm start"
    networks:
      - frontend
    volumes:
      - ${MY_DOCKER_DATA_DIR}/bondesjakk:/home/node/app
    labels:
      co.elastic.logs/disable: false
      #co.elastic.logs/module: apache
      #co.elastic.logs/fileset.stdout: access
      #co.elastic.logs/fileset.stderr: error

  garasjesjakk:
    container_name: garasjesjakk
    image: node:12
    restart: always
    expose:
      - "3000"
    environment:
      - TZ=${DOCKER_TZ}
      - VIRTUAL_HOST=${GARASJESJAKK_DOMAIN}
      - VIRTUAL_PORT=3000
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${GARASJESJAKK_DOMAIN}
      - LETSENCRYPT_EMAIL=${NOTIFICATION_EMAIL}
      - NODE_ENV=production
    user: "node"
    working_dir: /home/node/app
    command: "npm start"
    networks:
      - frontend
    volumes:
      - ${MY_DOCKER_DATA_DIR}/garasjesjakk:/home/node/app
      - ${MY_DOCKER_DATA_DIR}/nextcloud/data/remi/files/Nettsider/TheAwesomeGarage/garage-web-favicon-new.png:/home/node/app/public/favicon.png
    labels:
      co.elastic.logs/disable: false
      #co.elastic.logs/module: apache
      #co.elastic.logs/fileset.stdout: access
      #co.elastic.logs/fileset.stderr: error


  nginx:
    container_name: nginx
    #build: ./nginx-vts/.
    image: docker.remim.com/nginx-vts:latest
    restart: always
    environment:
      - TZ=${DOCKER_TZ}
    volumes:
      - nginx-conf:/etc/nginx/conf.d
      - ${MY_DOCKER_DATA_DIR}/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ${MY_DOCKER_DATA_DIR}/nginx/vhost.d:/etc/nginx/vhost.d
      - nginx-html:/usr/share/nginx/html
      - nginx-certs:/etc/nginx/certs:ro
      - nginx-logs:/var/log/nginx
      - ${MY_DOCKER_DATA_DIR}/nginx/auth/.htpasswd:/etc/nginx/.htpasswd
      - ${MY_DOCKER_DATA_DIR}/nginx/geo/GeoIPCity.dat:/usr/share/GeoIP/GeoCity.dat
      - ${MY_DOCKER_DATA_DIR}/nginx/geo/GeoIP.dat:/usr/share/GeoIP/GeoIP.dat
    ports:
      - 80:80
      - 443:443
    networks:
      frontend:
        aliases:
          - nginx-vts-status
    labels: 
      co.elastic.logs/disable: false
      co.elastic.logs/module: nginx
      co.elastic.logs/fileset.stdout: access
      co.elastic.logs/fileset.stderr: error

  nginx-gen:
    container_name: nginx-gen
    image: jwilder/docker-gen
    restart: always
    environment:
      - TZ=${DOCKER_TZ}
    depends_on:
      - simple-apache-php
      - portainer
      - cadvisor
      - nginx-redirect
      - grav
      - myregistry
      - grafana
      - prometheus
      - nginx
      - nextcloud-web
      - kibana
      - photoshow
      - passblt
    entrypoint: /bin/sh -c
    command: ["/usr/local/bin/docker-gen -notify-sighup nginx -watch -wait 30s:60s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf"]
    networks:
      - frontend
    volumes:
      - nginx-conf:/etc/nginx/conf.d
      - ${MY_DOCKER_DATA_DIR}/nginx/vhost.d:/etc/nginx/vhost.d
      - nginx-html:/usr/share/nginx/html
      - nginx-certs:/etc/nginx/certs:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ${MY_DOCKER_DATA_DIR}/nginx-gen/templates/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro
    labels:
      co.elastic.logs/disable: false

  nginx-ssl:
    container_name: nginx-ssl
    image: jrcs/letsencrypt-nginx-proxy-companion
    restart: always
    depends_on:
      - nginx-gen
    environment:
      - TZ=${DOCKER_TZ}
      - NGINX_PROXY_CONTAINER=nginx
      - NGINX_DOCKER_GEN_CONTAINER=nginx-gen
      #- ACME_CA_URI=https://acme-staging.api.letsencrypt.org/directory
      ##- DEBUG=true
    networks:
      - frontend
    volumes:
      - nginx-conf:/etc/nginx/conf.d
      - ${MY_DOCKER_DATA_DIR}/nginx/vhost.d:/etc/nginx/vhost.d
      - nginx-html:/usr/share/nginx/html
      - nginx-certs:/etc/nginx/certs:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      co.elastic.logs/disable: false

  portainer:
    container_name: portainer
    image: portainer/portainer
    environment:
      - TZ=${DOCKER_TZ}
      - VIRTUAL_HOST=${PORTAINER_DOMAIN}
      - VIRTUAL_PORT=9000
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${PORTAINER_DOMAIN}
      - LETSENCRYPT_EMAIL=${NOTIFICATION_EMAIL}
    command: -H unix:///var/run/docker.sock
    restart: always
    networks:
      - frontend
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    labels:
      co.elastic.logs/disable: false

  # Cadvisor should not be exposed openly externally because it has no auth-mechanism
  # Use predefined nginx vhost setting and create an auth-file for basic auth. See readme.
  cadvisor:
    image: 'google/cadvisor:latest'
    container_name: 'cadvisor'
    restart: always
    environment:
      - TZ=${DOCKER_TZ}
      - VIRTUAL_HOST=${CADVISOR_DOMAIN}
      - VIRTUAL_PORT=8080
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${CADVISOR_DOMAIN}
      - LETSENCRYPT_EMAIL=${NOTIFICATION_EMAIL}
    networks:
      - frontend
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    command: ["--storage_duration=30m0s"]
    labels:
      co.elastic.logs/disable: false

  openvpn-server:
    privileged: true
    image: kylemanna/openvpn
    container_name: openvpn-server
    networks:
      - openvpn
    environment:
      - TZ=${DOCKER_TZ}
    ports:
      - "1194:1194/udp"
    # TCP when UDP doesn't work...
    #  - "443:443/tcp"
    restart: always
    volumes:
     - ${MY_DOCKER_DATA_DIR}/openvpn-server/config:/etc/openvpn
    labels:
      co.elastic.logs/disable: false

  ouroboros:
    container_name: ouroboros
    hostname: ouroboros
    image: pyouroboros/ouroboros
    networks:
      - backend
    environment:
      - CLEANUP=true
      #- INTERVAL=30
      - LOG_LEVEL=debug
      - CRON="0 2 * * *"
      - SELF_UPDATE=true
      #- IGNORE=mongo influxdb postgres mariadb
      #- IGNORE=nextcloud-app
      - TZ=${DOCKER_TZ}
      - NOTIFIERS="mailtos://${GMAIL_USERNAME}:${GMAIL_PASSWORD}@gmail.com?to=${NOTIFICATION_EMAIL}"
    command: --data-export prometheus --prometheus-addr 0.0.0.0
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $HOME/.docker/config.json:/root/.docker/config.json
    labels:
      co.elastic.logs/disable: false

  myregistry:
    container_name: myregistry
    image: registry:2
    networks:
      - frontend
    expose:
      - "5000"
    restart: always
    environment:
      - TZ=${DOCKER_TZ}
      - VIRTUAL_HOST=${REGISTRY_DOMAIN}
      - VIRTUAL_PORT=5000
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${REGISTRY_DOMAIN}
      - LETSENCRYPT_EMAIL=${NOTIFICATION_EMAIL}
      - REGISTRY_AUTH=htpasswd
      - REGISTRY_AUTH_HTPASSWD_REALM=Docker registry access
      - REGISTRY_AUTH_HTPASSWD_PATH=/auth/.htpasswd
    volumes:
      - ${MY_DOCKER_DATA_DIR}/registry/data:/var/lib/registry
      - nginx-certs:/certs
      - ${MY_DOCKER_DATA_DIR}/registry/auth:/auth
    labels:
      co.elastic.logs/disable: false

  prometheus:
    container_name: prometheus
    image: prom/prometheus:latest
    restart: always
    networks:
      - frontend
      - backend
    expose:
      - "9090"
    environment:
      - TZ=${DOCKER_TZ}
      - VIRTUAL_HOST=${PROMETHEUS_DOMAIN}
      - VIRTUAL_PORT=9090
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${PROMETHEUS_DOMAIN}
      - LETSENCRYPT_EMAIL=${NOTIFICATION_EMAIL}
    volumes:
      - ${MY_DOCKER_DATA_DIR}/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ${MY_DOCKER_DATA_DIR}/prometheus/alert.rules:/etc/prometheus/alert.rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    labels:
      co.elastic.logs/disable: false

  prometheus-alertmanager:
    container_name: prometheus-alertmanager
    image: prom/alertmanager:latest
    restart: always
    environment:
      - TZ=${DOCKER_TZ}
    networks:
      - backend
      - email
    #expose:
    #  - "9093"
    volumes:
      - ${MY_DOCKER_DATA_DIR}/prometheus/alertmanager.yml:/alertmanager.yml
    command:
      - '--config.file=/alertmanager.yml'
    labels:
      co.elastic.logs/disable: false

  nginx-vts-exporter:
    container_name: nginx-vts-exporter
    image: sophos/nginx-vts-exporter
    restart: always
    networks:
      - backend
      - frontend
    ports:
      - 9913:9913
    environment:
      - TZ=${DOCKER_TZ}
      - NGINX_STATUS=http://nginx-vts-status/status/format/json
    labels:
      co.elastic.logs/disable: false

  nextcloud-vts-exporter:
    container_name: nextcloud-vts-exporter
    image: sophos/nginx-vts-exporter
    restart: always
    networks:
      - backend
      - frontend
    environment:
      - TZ=${DOCKER_TZ}
      - NGINX_STATUS=http://nextcloud-vts-status/status/format/json
    labels:
      co.elastic.logs/disable: false

  nextcloud-prometheus-exporter:
    container_name: nextcloud-prometheus-exporter
    #build: ./nextcloud-prometheus-exporter/.
    image: docker.remim.com/nextcloud-prometheus-exporter:latest
    restart: always
    networks:
      - backend
    depends_on:
      - nextcloud-web
    environment:
      - TZ=${DOCKER_TZ}
      - NEXTCLOUD_SERVERINFO_URL=https://${NEXTCLOUD_DOMAIN}/ocs/v2.php/apps/serverinfo/api/v1/info
      - NEXTCLOUD_USERNAME=${NEXTCLOUD_ADMIN_USER}
      - NEXTCLOUD_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}
    labels:
      co.elastic.logs/disable: false

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    restart: always
    depends_on:
      - prometheus
    networks:
      - frontend
      - email
    expose:
      - "3000"
    environment:
      - TZ=${DOCKER_TZ}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=smtp-relay:25
      - GF_SMTP_FROM_ADDRESS=${NOTIFICATION_EMAIL}
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN}
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL}
      - VIRTUAL_HOST=${GRAFANA_DOMAIN}
      - VIRTUAL_PORT=3000
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${GRAFANA_DOMAIN}
      - LETSENCRYPT_EMAIL=${NOTIFICATION_EMAIL}
    volumes:
      - grafana_data:/var/lib/grafana
    labels:
      co.elastic.logs/disable: false

  smtp-relay:
    container_name: smtp-relay
    #build: ./smtp-relay/.
    image: docker.remim.com/smtp-relay:latest
    restart: always
    networks: 
      - email
    environment:
      - TZ=${DOCKER_TZ}
      - RELAY_HOST=smtp.gmail.com
      - RELAY_PORT=587
      - RELAY_USERNAME=${GMAIL_USERNAME}@gmail.com
      - RELAY_PASSWORD=${GMAIL_PASSWORD}
    labels:
      co.elastic.logs/disable: false

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.0.0
    restart: always
    networks:
      - frontend
      - backend
    environment:
      - TZ=${DOCKER_TZ}
      - SERVER_NAME=${KIBANA_DOMAIN}
      - SERVER_PORT=5601
      - SERVER_HOST="0"
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - VIRTUAL_HOST=${KIBANA_DOMAIN}
      - VIRTUAL_PORT=5601
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${KIBANA_DOMAIN}
      - LETSENCRYPT_EMAIL=${NOTIFICATION_EMAIL}
    depends_on:
      - elasticsearch
    labels:
      co.elastic.logs/disable: false
      co.elastic.logs/module: kibana

  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.0.0
    restart: always
    networks:
      - backend
    environment:
      - TZ=${DOCKER_TZ}
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    labels:
      co.elastic.logs/disable: false
      co.elastic.logs/module: elasticsearch

  filebeat:
    container_name: filebeat
    image: docker.elastic.co/beats/filebeat:7.0.0
    restart: always
    user: root
    networks:
      - backend
    volumes:
      - ${MY_DOCKER_DATA_DIR}/filebeat/module/php-fpm:/usr/share/filebeat/module/php-fpm
      - ${MY_DOCKER_DATA_DIR}/filebeat/module/nginx/access/ingest/default.json:/usr/share/filebeat/module/nginx/access/ingest/default.json
      - ${MY_DOCKER_DATA_DIR}/filebeat/module/apache/access/ingest/default.json:/usr/share/filebeat/module/apache/access/ingest/default.json
      - ${MY_DOCKER_DATA_DIR}/filebeat/module/system/syslog/manifest.yml:/usr/share/filebeat/module/system/syslog/manifest.yml
      - ${MY_DOCKER_DATA_DIR}/filebeat/module/system/auth/manifest.yml:/usr/share/filebeat/module/system/auth/manifest.yml
      - ${MY_DOCKER_DATA_DIR}/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - filebeat_data:/usr/share/filebeat/data
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers/:/var/lib/docker/containers/:ro
      - /var/log/:/var/log/:ro
      - nextcloud-db-logs:/mnt/nextcloud-db-log:ro
    environment:
      - TZ=${DOCKER_TZ}
      - ELASTICSEARCH_HOST=elasticsearch:9200
      - KIBANA_HOST=kibana:5601
    command: ["--strict.perms=false"]
    labels:
      co.elastic.logs/disable: false

  photoshow:
    container_name: photoshow
    image: linuxserver/photoshow
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    networks:
      - frontend
    environment:
      - TZ=${DOCKER_TZ}
      - VIRTUAL_HOST=${PHOTOSHOW_DOMAIN}
      - VIRTUAL_PORT=80
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${PHOTOSHOW_DOMAIN}
      - LETSENCRYPT_EMAIL=${NOTIFICATION_EMAIL}
    volumes:
      - photoshow-config:/config
      - /path/to/photo/archive/:/Pictures/:ro
      - photoshow-thumbs:/Thumbs
    restart: unless-stopped
    labels:
      co.elastic.logs/disable: false

  passbolt_db:
    container_name: passbolt_db
    image: mariadb:10.3
    volumes:
      - passbolt_db:/var/lib/mysql
    networks:
      - backend
    environment:
      - TZ=${DOCKER_TZ}
      - MYSQL_ROOT_PASSWORD=${PASSBOLT_MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${PASSBOLT_MYSQL_DATABASE}
      - MYSQL_USER=${PASSBOLT_MYSQL_USER}
      - MYSQL_PASSWORD=${PASSBOLT_MYSQL_PASSWORD}

  passblt:
    container_name: passblt
    image: passbolt/passbolt:2.12.0-debian
    tty: true
    depends_on:
      - passbolt_db
    networks:
      - frontend
      - backend
      - email
    volumes:
      - passbolt_gpg:/var/www/passbolt/config/gpg
      - passbolt_images:/var/www/passbolt/webroot/img/public
    tmpfs:
      - /run
    command: ["/usr/bin/wait-for.sh", "-t", "0", "passbolt_db:3306", "--", "/docker-entrypoint.sh"]
    environment:
      - TZ=${DOCKER_TZ}
      - APP_FULL_BASE_URL=${PASSBOLT_APP_FULL_BASE_URL}
      - DATASOURCES_DEFAULT_HOST=${PASSBOLT_DATASOURCES_DEFAULT_HOST}
      - DATASOURCES_DEFAULT_PORT=${PASSBOLT_DATASOURCES_DEFAULT_PORT}      
      - DATASOURCES_DEFAULT_USERNAME=${PASSBOLT_MYSQL_USER}
      - DATASOURCES_DEFAULT_PASSWORD=${PASSBOLT_MYSQL_PASSWORD}
      - DATASOURCES_DEFAULT_DATABASE=${PASSBOLT_MYSQL_DATABASE}
      - PASSBOLT_REGISTRATION_PUBLIC=${PASSBOLT_REGISTRATION_PUBLIC}
      - EMAIL_TRANSPORT_DEFAULT_HOST=smtp-relay
      - EMAIL_TRANSPORT_DEFAULT_PORT=25
      - EMAIL_DEFAULT_FROM=${NOTIFICATION_EMAIL}
      - VIRTUAL_HOST=${PASSBOLT_DOMAIN}
      - VIRTUAL_PORT=80
      - VIRTUAL_PROTO=http
      - LETSENCRYPT_HOST=${PASSBOLT_DOMAIN}
      - LETSENCRYPT_EMAIL=${NOTIFICATION_EMAIL}
    labels:
      co.elastic.logs/disable: false

  unifi-controller:
    image: linuxserver/unifi-controller
    container_name: unifi-controller
    environment:
      - PUID=1000
      - PGID=1000
      - MEM_LIMIT=1024M #optional
    networks:
      - email
    volumes:
      - ${MY_DOCKER_DATA_DIR}/unifi-controller:/config
    ports:
      - 3478:3478/udp
    #  - 10001:10001/udp
      - 8080:8080
    #  - 8081:8081
      - 8443:8443
    #  - 8843:8843
    #  - 8880:8880
    #  - 6789:6789
    restart: unless-stopped


  samba:
    image: dperson/samba
    container_name: samba
    restart: unless-stopped
    stdin_open: true
    tty: true
    environment:
      TZ: ${DOCKER_TZ}
      NMBD: "false"
      USERID: "1000"
      GROUPID: "1000"
      SHARE: "sharename;/myshare;yes;no;yes;all;'none';'none';'sharelabel'"
      RECYCLE: ""
    ports:
    #  - "137:137/udp" # required to advertise shares (NMBD)
    #  - "138:138/udp" # required to advertise shares (NMBD)
      - "139:139/tcp" # default smb port
      - "445:445/tcp" # default smb port
    read_only: false
    tmpfs:
      - /tmp
    volumes:
      - /local/path/to/shared/files:/myshare:z # :z allows share to be used by multiple containers
